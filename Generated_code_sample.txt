#include "iokit_monitor.h"

#undef printf
#define printf(args...) debug_print_toFile(args)
#define printf_indent(indent_count, fmt...) do{printf("%*s", (indent_count)*2, ""); printf(fmt); }while(0)

void migtest_copyin(ipc_kmsg_t kmsg, ipc_space_t space){
    int indent_count = 0;
    #define _WALIGN_(x) (((x) + 3) & ~3)
    __attribute__((unused)) mach_msg_header_t *machmsg_head = kmsg->ikm_header;
    __attribute__((unused)) struct ipc_port *machport_local = machmsg_head->msgh_local_port;
    __attribute__((unused)) struct ipc_port *machport_remote = machmsg_head->msgh_remote_port;
    
    printf_indent(indent_count, "(SEND)");

    mach_msg_id_t requesting_msgh_id = machmsg_head->msgh_id;
    if(requesting_msgh_id >= 2800 && requesting_msgh_id <= 2884){
        switch (requesting_msgh_id) {
            case 2800:{
                printf_indent(indent_count, "io_object_get_class\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t object
                printf_indent(indent_count+1, "> mach_port_t object =\n");
                mach_port_t machport_object = machport_remote;
                mach_port_name_t machport_object_name = 0;
                if(machport_object){
                if((vm_offset_t)machport_object > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_object = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_object, &machport_object_name, &ipcentry_object);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_object_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_object);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t className
                printf_indent(indent_count+1, "X io_name_t className = (X)\n");
            }break;
            case 2801:{
                printf_indent(indent_count, "io_object_conforms_to\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t classNameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t classNameCnt;
                    char className[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_classNameOffset = InP;
                __attribute__((unused)) Request *InP_classNameCnt = InP;
                __attribute__((unused)) Request *InP_className = InP;
                
                //Argument 1: mach_port_t object
                printf_indent(indent_count+1, "> mach_port_t object =\n");
                mach_port_t machport_object = machport_remote;
                mach_port_name_t machport_object_name = 0;
                if(machport_object){
                if((vm_offset_t)machport_object > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_object = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_object, &machport_object_name, &ipcentry_object);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_object_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_object);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t className
                printf_indent(indent_count+1, "> io_name_t className =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_className->className);
                
                //Argument 3: boolean_t *conforms
                printf_indent(indent_count+1, "X boolean_t *conforms = (X)\n");
            }break;
            case 2802:{
                printf_indent(indent_count, "io_iterator_next\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "> mach_port_t iterator =\n");
                mach_port_t machport_iterator = machport_remote;
                mach_port_name_t machport_iterator_name = 0;
                if(machport_iterator){
                if((vm_offset_t)machport_iterator > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_iterator = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_iterator, &machport_iterator_name, &ipcentry_iterator);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t *object
                printf_indent(indent_count+1, "X mach_port_t *object = (X)\n");
            }break;
            case 2803:{
                printf_indent(indent_count, "io_iterator_reset\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "> mach_port_t iterator =\n");
                mach_port_t machport_iterator = machport_remote;
                mach_port_name_t machport_iterator_name = 0;
                if(machport_iterator){
                if((vm_offset_t)machport_iterator > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_iterator = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_iterator, &machport_iterator_name, &ipcentry_iterator);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2804:{
                printf_indent(indent_count, "io_service_get_matching_services\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t matchingCnt;
                    char matching[512];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingOffset = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_string_t matching
                printf_indent(indent_count+1, "> io_string_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_port_t *existing
                printf_indent(indent_count+1, "X mach_port_t *existing = (X)\n");
            }break;
            case 2805:{
                printf_indent(indent_count, "io_registry_entry_get_property\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t property_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t property_nameCnt;
                    char property_name[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_property_nameOffset = InP;
                __attribute__((unused)) Request *InP_property_nameCnt = InP;
                __attribute__((unused)) Request *InP_property_name = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t property_name
                printf_indent(indent_count+1, "> io_name_t property_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_property_name->property_name);
                
                //Argument 3: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "X io_buf_ptr_t *properties = (X)\n");
                
                //Argument 4: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *propertiesCnt = (X)\n");
            }break;
            case 2806:{
                printf_indent(indent_count, "io_registry_create_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                    uint32_t options;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                
                __attribute__((unused)) Request *InP_plane = InP;
                __attribute__((unused)) mach_msg_type_number_t planeCnt = InP->planeCnt;
                msgh_size_delta = _WALIGN_(InP->planeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 128) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_options = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: uint32_t options
                printf_indent(indent_count+1, "> uint32_t options =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_options->options);
                
                //Argument 4: mach_port_t *iterator
                printf_indent(indent_count+1, "X mach_port_t *iterator = (X)\n");
            }break;
            case 2807:{
                printf_indent(indent_count, "io_registry_iterator_enter_entry\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "> mach_port_t iterator =\n");
                mach_port_t machport_iterator = machport_remote;
                mach_port_name_t machport_iterator_name = 0;
                if(machport_iterator){
                if((vm_offset_t)machport_iterator > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_iterator = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_iterator, &machport_iterator_name, &ipcentry_iterator);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2808:{
                printf_indent(indent_count, "io_registry_iterator_exit_entry\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "> mach_port_t iterator =\n");
                mach_port_t machport_iterator = machport_remote;
                mach_port_name_t machport_iterator_name = 0;
                if(machport_iterator){
                if((vm_offset_t)machport_iterator > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_iterator = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_iterator, &machport_iterator_name, &ipcentry_iterator);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2809:{
                printf_indent(indent_count, "io_registry_entry_from_path\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t pathOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t pathCnt;
                    char path[512];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_pathOffset = InP;
                __attribute__((unused)) Request *InP_pathCnt = InP;
                __attribute__((unused)) Request *InP_path = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_string_t path
                printf_indent(indent_count+1, "> io_string_t path =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_port_t *registry_entry
                printf_indent(indent_count+1, "X mach_port_t *registry_entry = (X)\n");
            }break;
            case 2810:{
                printf_indent(indent_count, "io_registry_entry_get_name\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t name
                printf_indent(indent_count+1, "X io_name_t name = (X)\n");
            }break;
            case 2811:{
                printf_indent(indent_count, "io_registry_entry_get_properties\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "X io_buf_ptr_t *properties = (X)\n");
                
                //Argument 3: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *propertiesCnt = (X)\n");
            }break;
            case 2812:{
                printf_indent(indent_count, "io_registry_entry_get_property_bytes\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t property_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t property_nameCnt;
                    char property_name[128];
                    mach_msg_type_number_t dataCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_property_nameOffset = InP;
                __attribute__((unused)) Request *InP_property_nameCnt = InP;
                
                __attribute__((unused)) Request *InP_property_name = InP;
                __attribute__((unused)) mach_msg_type_number_t property_nameCnt = InP->property_nameCnt;
                msgh_size_delta = _WALIGN_(InP->property_nameCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 128) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_dataCnt = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t property_name
                printf_indent(indent_count+1, "> io_name_t property_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_property_name->property_name);
                
                //Argument 3: io_struct_inband_t data
                printf_indent(indent_count+1, "X io_struct_inband_t data = (X)\n");
                
                //Argument 4: mach_msg_type_number_t *dataCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *dataCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2813:{
                printf_indent(indent_count, "io_registry_entry_get_child_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                __attribute__((unused)) Request *InP_plane = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: mach_port_t *iterator
                printf_indent(indent_count+1, "X mach_port_t *iterator = (X)\n");
            }break;
            case 2814:{
                printf_indent(indent_count, "io_registry_entry_get_parent_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                __attribute__((unused)) Request *InP_plane = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: mach_port_t *iterator
                printf_indent(indent_count+1, "X mach_port_t *iterator = (X)\n");
            }break;
            case 2816:{
                printf_indent(indent_count, "io_service_close\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2817:{
                printf_indent(indent_count, "io_connect_get_service\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t *service
                printf_indent(indent_count+1, "X mach_port_t *service = (X)\n");
            }break;
            case 2818:{
                printf_indent(indent_count, "io_connect_set_notification_port\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t port;
                    NDR_record_t NDR;
                    uint32_t notification_type;
                    uint32_t reference;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t notification_type
                printf_indent(indent_count+1, "> uint32_t notification_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_notification_type->notification_type);
                
                //Argument 3: mach_port_t port
                printf_indent(indent_count+1, "> mach_port_t port =\n");
                mach_port_t machport_port = InP_port->port.name;
                mach_port_name_t machport_port_name = 0;
                if(machport_port){
                if((vm_offset_t)machport_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_port, &machport_port_name, &ipcentry_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: uint32_t reference
                printf_indent(indent_count+1, "> uint32_t reference =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_reference->reference);
            }break;
            case 2819:{
                printf_indent(indent_count, "io_connect_map_memory\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t into_task;
                    NDR_record_t NDR;
                    uint32_t memory_type;
                    uint32_t address;
                    uint32_t size;
                    uint32_t flags;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_into_task = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_memory_type = InP;
                __attribute__((unused)) Request *InP_address = InP;
                __attribute__((unused)) Request *InP_size = InP;
                __attribute__((unused)) Request *InP_flags = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "> uint32_t memory_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_memory_type->memory_type);
                
                //Argument 3: task_t into_task
                printf_indent(indent_count+1, "> task_t into_task =\n");
                mach_port_t machport_into_task = InP_into_task->into_task.name;
                mach_port_name_t machport_into_task_name = 0;
                if(machport_into_task){
                if((vm_offset_t)machport_into_task > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_into_task = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_into_task, &machport_into_task_name, &ipcentry_into_task);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_into_task_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_into_task);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: uint32_t *address
                printf_indent(indent_count+1, "> uint32_t *address =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_address->address);
                
                //Argument 5: uint32_t *size
                printf_indent(indent_count+1, "> uint32_t *size =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_size->size);
                
                //Argument 6: uint32_t flags
                printf_indent(indent_count+1, "> uint32_t flags =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_flags->flags);
            }break;
            case 2820:{
                printf_indent(indent_count, "io_connect_add_client\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t connect_to;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_connect_to = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t connect_to
                printf_indent(indent_count+1, "> mach_port_t connect_to =\n");
                mach_port_t machport_connect_to = InP_connect_to->connect_to.name;
                mach_port_name_t machport_connect_to_name = 0;
                if(machport_connect_to){
                if((vm_offset_t)machport_connect_to > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connect_to = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connect_to, &machport_connect_to_name, &ipcentry_connect_to);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connect_to_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connect_to);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2821:{
                printf_indent(indent_count, "io_connect_set_properties\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_properties = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_propertiesCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t properties
                printf_indent(indent_count+1, "> io_buf_ptr_t properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t propertiesCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
            }break;
            case 2822:{
                printf_indent(indent_count, "io_connect_method_scalarI_scalarO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    int input[16];
                    mach_msg_type_number_t outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = (4 * inputCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 64) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 3: io_scalar_inband_t input
                printf_indent(indent_count+1, "> io_scalar_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_scalar_inband_t output
                printf_indent(indent_count+1, "X io_scalar_inband_t output = (X)\n");
                
                //Argument 6: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2823:{
                printf_indent(indent_count, "io_connect_method_scalarI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    int input[16];
                    mach_msg_type_number_t outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = (4 * inputCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 64) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 3: io_scalar_inband_t input
                printf_indent(indent_count+1, "> io_scalar_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_struct_inband_t output
                printf_indent(indent_count+1, "X io_struct_inband_t output = (X)\n");
                
                //Argument 6: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2824:{
                printf_indent(indent_count, "io_connect_method_scalarI_structureI\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    int input[16];
                    mach_msg_type_number_t inputStructCnt;
                    char inputStruct[4096];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = (4 * inputCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4160) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_inputStructCnt = InP;
                __attribute__((unused)) Request *InP_inputStruct = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 3: io_scalar_inband_t input
                printf_indent(indent_count+1, "> io_scalar_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_struct_inband_t inputStruct
                printf_indent(indent_count+1, "> io_struct_inband_t inputStruct =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t inputStructCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputStructCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2825:{
                printf_indent(indent_count, "io_connect_method_structureI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    char input[4096];
                    mach_msg_type_number_t outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = _WALIGN_(inputCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4096) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 3: io_struct_inband_t input
                printf_indent(indent_count+1, "> io_struct_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_struct_inband_t output
                printf_indent(indent_count+1, "X io_struct_inband_t output = (X)\n");
                
                //Argument 6: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2826:{
                printf_indent(indent_count, "io_registry_entry_get_path\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                __attribute__((unused)) Request *InP_plane = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: io_string_t path
                printf_indent(indent_count+1, "X io_string_t path = (X)\n");
            }break;
            case 2827:{
                printf_indent(indent_count, "io_registry_get_root_entry\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t *root
                printf_indent(indent_count+1, "X mach_port_t *root = (X)\n");
            }break;
            case 2828:{
                printf_indent(indent_count, "io_registry_entry_set_properties\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_properties = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_propertiesCnt = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t properties
                printf_indent(indent_count+1, "> io_buf_ptr_t properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t propertiesCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
            }break;
            case 2829:{
                printf_indent(indent_count, "io_registry_entry_in_plane\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                __attribute__((unused)) Request *InP_plane = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: boolean_t *inPlane
                printf_indent(indent_count+1, "X boolean_t *inPlane = (X)\n");
            }break;
            case 2830:{
                printf_indent(indent_count, "io_object_get_retain_count\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t object
                printf_indent(indent_count+1, "> mach_port_t object =\n");
                mach_port_t machport_object = machport_remote;
                mach_port_name_t machport_object_name = 0;
                if(machport_object){
                if((vm_offset_t)machport_object > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_object = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_object, &machport_object_name, &ipcentry_object);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_object_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_object);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t *retainCount
                printf_indent(indent_count+1, "X uint32_t *retainCount = (X)\n");
            }break;
            case 2831:{
                printf_indent(indent_count, "io_service_get_busy_state\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t *busyState
                printf_indent(indent_count+1, "X uint32_t *busyState = (X)\n");
            }break;
            case 2832:{
                printf_indent(indent_count, "io_service_wait_quiet\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_timespec_t wait_time;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_wait_time = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_timespec_t wait_time
                printf_indent(indent_count+1, "> mach_timespec_t wait_time =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2833:{
                printf_indent(indent_count, "io_registry_entry_create_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                    uint32_t options;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                
                __attribute__((unused)) Request *InP_plane = InP;
                __attribute__((unused)) mach_msg_type_number_t planeCnt = InP->planeCnt;
                msgh_size_delta = _WALIGN_(InP->planeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 128) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_options = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: uint32_t options
                printf_indent(indent_count+1, "> uint32_t options =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_options->options);
                
                //Argument 4: mach_port_t *iterator
                printf_indent(indent_count+1, "X mach_port_t *iterator = (X)\n");
            }break;
            case 2834:{
                printf_indent(indent_count, "io_iterator_is_valid\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "> mach_port_t iterator =\n");
                mach_port_t machport_iterator = machport_remote;
                mach_port_name_t machport_iterator_name = 0;
                if(machport_iterator){
                if((vm_offset_t)machport_iterator > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_iterator = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_iterator, &machport_iterator_name, &ipcentry_iterator);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: boolean_t *is_valid
                printf_indent(indent_count+1, "X boolean_t *is_valid = (X)\n");
            }break;
            case 2836:{
                printf_indent(indent_count, "io_catalog_send_data\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t inData;
                    NDR_record_t NDR;
                    uint32_t flag;
                    mach_msg_type_number_t inDataCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_inData = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_flag = InP;
                __attribute__((unused)) Request *InP_inDataCnt = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "> uint32_t flag =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_flag->flag);
                
                //Argument 3: io_buf_ptr_t inData
                printf_indent(indent_count+1, "> io_buf_ptr_t inData =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t inDataCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inDataCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
            }break;
            case 2837:{
                printf_indent(indent_count, "io_catalog_terminate\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t flag;
                    mach_msg_type_number_t nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t nameCnt;
                    char name[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_flag = InP;
                __attribute__((unused)) Request *InP_nameOffset = InP;
                __attribute__((unused)) Request *InP_nameCnt = InP;
                __attribute__((unused)) Request *InP_name = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "> uint32_t flag =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_flag->flag);
                
                //Argument 3: io_name_t name
                printf_indent(indent_count+1, "> io_name_t name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_name->name);
            }break;
            case 2838:{
                printf_indent(indent_count, "io_catalog_get_data\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t flag;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_flag = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "> uint32_t flag =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_flag->flag);
                
                //Argument 3: io_buf_ptr_t *outData
                printf_indent(indent_count+1, "X io_buf_ptr_t *outData = (X)\n");
                
                //Argument 4: mach_msg_type_number_t *outDataCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *outDataCnt = (X)\n");
            }break;
            case 2839:{
                printf_indent(indent_count, "io_catalog_get_gen_count\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t *genCount
                printf_indent(indent_count+1, "X uint32_t *genCount = (X)\n");
            }break;
            case 2840:{
                printf_indent(indent_count, "io_catalog_module_loaded\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t nameCnt;
                    char name[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_nameOffset = InP;
                __attribute__((unused)) Request *InP_nameCnt = InP;
                __attribute__((unused)) Request *InP_name = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t name
                printf_indent(indent_count+1, "> io_name_t name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_name->name);
            }break;
            case 2841:{
                printf_indent(indent_count, "io_catalog_reset\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t flag;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_flag = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "> uint32_t flag =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_flag->flag);
            }break;
            case 2842:{
                printf_indent(indent_count, "io_service_request_probe\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t options;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_options = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t options
                printf_indent(indent_count+1, "> uint32_t options =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_options->options);
            }break;
            case 2843:{
                printf_indent(indent_count, "io_registry_entry_get_name_in_plane\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                __attribute__((unused)) Request *InP_plane = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: io_name_t name
                printf_indent(indent_count+1, "X io_name_t name = (X)\n");
            }break;
            case 2844:{
                printf_indent(indent_count, "io_service_match_property_table\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t matchingCnt;
                    char matching[512];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingOffset = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_string_t matching
                printf_indent(indent_count+1, "> io_string_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: boolean_t *matches
                printf_indent(indent_count+1, "X boolean_t *matches = (X)\n");
            }break;
            case 2845:{
                printf_indent(indent_count, "io_async_method_scalarI_scalarO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    int input[16];
                    mach_msg_type_number_t outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                
                __attribute__((unused)) Request *InP_reference = InP;
                __attribute__((unused)) mach_msg_type_number_t referenceCnt = InP->referenceCnt;
                msgh_size_delta = (4 * referenceCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 96) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 32);
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = (4 * inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 6: io_scalar_inband_t input
                printf_indent(indent_count+1, "> io_scalar_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: io_scalar_inband_t output
                printf_indent(indent_count+1, "X io_scalar_inband_t output = (X)\n");
                
                //Argument 9: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2846:{
                printf_indent(indent_count, "io_async_method_scalarI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    int input[16];
                    mach_msg_type_number_t outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                
                __attribute__((unused)) Request *InP_reference = InP;
                __attribute__((unused)) mach_msg_type_number_t referenceCnt = InP->referenceCnt;
                msgh_size_delta = (4 * referenceCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 96) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 32);
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = (4 * inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 6: io_scalar_inband_t input
                printf_indent(indent_count+1, "> io_scalar_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: io_struct_inband_t output
                printf_indent(indent_count+1, "X io_struct_inband_t output = (X)\n");
                
                //Argument 9: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2847:{
                printf_indent(indent_count, "io_async_method_scalarI_structureI\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    int input[16];
                    mach_msg_type_number_t inputStructCnt;
                    char inputStruct[4096];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                
                __attribute__((unused)) Request *InP_reference = InP;
                __attribute__((unused)) mach_msg_type_number_t referenceCnt = InP->referenceCnt;
                msgh_size_delta = (4 * referenceCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4192) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 32);
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = (4 * inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_inputStructCnt = InP;
                __attribute__((unused)) Request *InP_inputStruct = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 6: io_scalar_inband_t input
                printf_indent(indent_count+1, "> io_scalar_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: io_struct_inband_t inputStruct
                printf_indent(indent_count+1, "> io_struct_inband_t inputStruct =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_msg_type_number_t inputStructCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputStructCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2848:{
                printf_indent(indent_count, "io_async_method_structureI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                    uint32_t selector;
                    mach_msg_type_number_t inputCnt;
                    char input[4096];
                    mach_msg_type_number_t outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                
                __attribute__((unused)) Request *InP_reference = InP;
                __attribute__((unused)) mach_msg_type_number_t referenceCnt = InP->referenceCnt;
                msgh_size_delta = (4 * referenceCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4128) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 32);
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inputCnt = InP->inputCnt;
                msgh_size_delta = _WALIGN_(inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 6: io_struct_inband_t input
                printf_indent(indent_count+1, "> io_struct_inband_t input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: io_struct_inband_t output
                printf_indent(indent_count+1, "X io_struct_inband_t output = (X)\n");
                
                //Argument 9: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2849:{
                printf_indent(indent_count, "io_service_add_notification\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t notification_typeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t notification_typeCnt;
                    char notification_type[128];
                    mach_msg_type_number_t matchingOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t matchingCnt;
                    char matching[512];
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_typeOffset = InP;
                __attribute__((unused)) Request *InP_notification_typeCnt = InP;
                
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) mach_msg_type_number_t notification_typeCnt = InP->notification_typeCnt;
                msgh_size_delta = _WALIGN_(InP->notification_typeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 672) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_matchingOffset = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) mach_msg_type_number_t matchingCnt = InP->matchingCnt;
                msgh_size_delta = _WALIGN_(InP->matchingCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 512);
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "> io_name_t notification_type =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_notification_type->notification_type);
                
                //Argument 3: io_string_t matching
                printf_indent(indent_count+1, "> io_string_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 5: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2850:{
                printf_indent(indent_count, "io_service_add_interest_notification\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t type_of_interestOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t type_of_interestCnt;
                    char type_of_interest[128];
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_type_of_interestOffset = InP;
                __attribute__((unused)) Request *InP_type_of_interestCnt = InP;
                
                __attribute__((unused)) Request *InP_type_of_interest = InP;
                __attribute__((unused)) mach_msg_type_number_t type_of_interestCnt = InP->type_of_interestCnt;
                msgh_size_delta = _WALIGN_(InP->type_of_interestCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 160) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t type_of_interest
                printf_indent(indent_count+1, "> io_name_t type_of_interest =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_type_of_interest->type_of_interest);
                
                //Argument 3: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2851:{
                printf_indent(indent_count, "io_service_acknowledge_notification\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    natural_t notify_ref;
                    natural_t response;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notify_ref = InP;
                __attribute__((unused)) Request *InP_response = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: natural_t notify_ref
                printf_indent(indent_count+1, "> natural_t notify_ref =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: natural_t response
                printf_indent(indent_count+1, "> natural_t response =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2852:{
                printf_indent(indent_count, "io_connect_get_notification_semaphore\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    natural_t notification_type;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_type = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: natural_t notification_type
                printf_indent(indent_count+1, "> natural_t notification_type =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: semaphore_t *semaphore
                printf_indent(indent_count+1, "X semaphore_t *semaphore = (X)\n");
            }break;
            case 2853:{
                printf_indent(indent_count, "io_connect_unmap_memory\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t into_task;
                    NDR_record_t NDR;
                    uint32_t memory_type;
                    uint32_t address;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_into_task = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_memory_type = InP;
                __attribute__((unused)) Request *InP_address = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "> uint32_t memory_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_memory_type->memory_type);
                
                //Argument 3: task_t into_task
                printf_indent(indent_count+1, "> task_t into_task =\n");
                mach_port_t machport_into_task = InP_into_task->into_task.name;
                mach_port_name_t machport_into_task_name = 0;
                if(machport_into_task){
                if((vm_offset_t)machport_into_task > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_into_task = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_into_task, &machport_into_task_name, &ipcentry_into_task);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_into_task_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_into_task);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: uint32_t address
                printf_indent(indent_count+1, "> uint32_t address =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_address->address);
            }break;
            case 2854:{
                printf_indent(indent_count, "io_registry_entry_get_location_in_plane\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                __attribute__((unused)) Request *InP_plane = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: io_name_t location
                printf_indent(indent_count+1, "X io_name_t location = (X)\n");
            }break;
            case 2855:{
                printf_indent(indent_count, "io_registry_entry_get_property_recursively\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                    mach_msg_type_number_t property_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t property_nameCnt;
                    char property_name[128];
                    uint32_t options;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                
                __attribute__((unused)) Request *InP_plane = InP;
                __attribute__((unused)) mach_msg_type_number_t planeCnt = InP->planeCnt;
                msgh_size_delta = _WALIGN_(InP->planeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 256) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_property_nameOffset = InP;
                __attribute__((unused)) Request *InP_property_nameCnt = InP;
                
                __attribute__((unused)) Request *InP_property_name = InP;
                __attribute__((unused)) mach_msg_type_number_t property_nameCnt = InP->property_nameCnt;
                msgh_size_delta = _WALIGN_(InP->property_nameCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_options = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: io_name_t property_name
                printf_indent(indent_count+1, "> io_name_t property_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_property_name->property_name);
                
                //Argument 4: uint32_t options
                printf_indent(indent_count+1, "> uint32_t options =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_options->options);
                
                //Argument 5: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "X io_buf_ptr_t *properties = (X)\n");
                
                //Argument 6: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *propertiesCnt = (X)\n");
            }break;
            case 2856:{
                printf_indent(indent_count, "io_service_get_state\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint64_t *state
                printf_indent(indent_count+1, "X uint64_t *state = (X)\n");
                
                //Argument 3: uint32_t *busy_state
                printf_indent(indent_count+1, "X uint32_t *busy_state = (X)\n");
                
                //Argument 4: uint64_t *accumulated_busy_time
                printf_indent(indent_count+1, "X uint64_t *accumulated_busy_time = (X)\n");
            }break;
            case 2857:{
                printf_indent(indent_count, "io_service_get_matching_services_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t matching;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t matching
                printf_indent(indent_count+1, "> io_buf_ptr_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
                
                //Argument 5: mach_port_t *existing
                printf_indent(indent_count+1, "X mach_port_t *existing = (X)\n");
            }break;
            case 2858:{
                printf_indent(indent_count, "io_service_match_property_table_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t matching;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t matching
                printf_indent(indent_count+1, "> io_buf_ptr_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
                
                //Argument 5: boolean_t *matches
                printf_indent(indent_count+1, "X boolean_t *matches = (X)\n");
            }break;
            case 2859:{
                printf_indent(indent_count, "io_service_add_notification_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t matching;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t notification_typeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t notification_typeCnt;
                    char notification_type[128];
                    mach_msg_type_number_t matchingCnt;
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_typeOffset = InP;
                __attribute__((unused)) Request *InP_notification_typeCnt = InP;
                
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) mach_msg_type_number_t notification_typeCnt = InP->notification_typeCnt;
                msgh_size_delta = _WALIGN_(InP->notification_typeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 160) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "> io_name_t notification_type =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_notification_type->notification_type);
                
                //Argument 3: io_buf_ptr_t matching
                printf_indent(indent_count+1, "> io_buf_ptr_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 6: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
                
                //Argument 9: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2860:{
                printf_indent(indent_count, "io_object_get_superclass\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t obj_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t obj_nameCnt;
                    char obj_name[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_obj_nameOffset = InP;
                __attribute__((unused)) Request *InP_obj_nameCnt = InP;
                __attribute__((unused)) Request *InP_obj_name = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t obj_name
                printf_indent(indent_count+1, "> io_name_t obj_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_obj_name->obj_name);
                
                //Argument 3: io_name_t class_name
                printf_indent(indent_count+1, "X io_name_t class_name = (X)\n");
            }break;
            case 2861:{
                printf_indent(indent_count, "io_object_get_bundle_identifier\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t obj_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t obj_nameCnt;
                    char obj_name[128];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_obj_nameOffset = InP;
                __attribute__((unused)) Request *InP_obj_nameCnt = InP;
                __attribute__((unused)) Request *InP_obj_name = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t obj_name
                printf_indent(indent_count+1, "> io_name_t obj_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_obj_name->obj_name);
                
                //Argument 3: io_name_t class_name
                printf_indent(indent_count+1, "X io_name_t class_name = (X)\n");
            }break;
            case 2862:{
                printf_indent(indent_count, "io_service_open_extended\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t owningTask;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    uint32_t connect_type;
                    NDR_record_t ndr;
                    mach_msg_type_number_t propertiesCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_owningTask = InP;
                __attribute__((unused)) Request *InP_properties = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_connect_type = InP;
                __attribute__((unused)) Request *InP_ndr = InP;
                __attribute__((unused)) Request *InP_propertiesCnt = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: task_t owningTask
                printf_indent(indent_count+1, "> task_t owningTask =\n");
                mach_port_t machport_owningTask = InP_owningTask->owningTask.name;
                mach_port_name_t machport_owningTask_name = 0;
                if(machport_owningTask){
                if((vm_offset_t)machport_owningTask > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_owningTask = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_owningTask, &machport_owningTask_name, &ipcentry_owningTask);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_owningTask_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_owningTask);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 3: uint32_t connect_type
                printf_indent(indent_count+1, "> uint32_t connect_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_connect_type->connect_type);
                
                //Argument 4: NDR_record_t ndr
                printf_indent(indent_count+1, "> NDR_record_t ndr =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_buf_ptr_t properties
                printf_indent(indent_count+1, "> io_buf_ptr_t properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t propertiesCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
                
                //Argument 8: mach_port_t *connection
                printf_indent(indent_count+1, "X mach_port_t *connection = (X)\n");
            }break;
            case 2863:{
                printf_indent(indent_count, "io_connect_map_memory_into_task\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t into_task;
                    NDR_record_t NDR;
                    uint32_t memory_type;
                    mach_vm_address_t address;
                    mach_vm_size_t size;
                    uint32_t flags;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_into_task = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_memory_type = InP;
                __attribute__((unused)) Request *InP_address = InP;
                __attribute__((unused)) Request *InP_size = InP;
                __attribute__((unused)) Request *InP_flags = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "> uint32_t memory_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_memory_type->memory_type);
                
                //Argument 3: task_t into_task
                printf_indent(indent_count+1, "> task_t into_task =\n");
                mach_port_t machport_into_task = InP_into_task->into_task.name;
                mach_port_name_t machport_into_task_name = 0;
                if(machport_into_task){
                if((vm_offset_t)machport_into_task > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_into_task = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_into_task, &machport_into_task_name, &ipcentry_into_task);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_into_task_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_into_task);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: mach_vm_address_t *address
                printf_indent(indent_count+1, "> mach_vm_address_t *address =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_vm_size_t *size
                printf_indent(indent_count+1, "> mach_vm_size_t *size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: uint32_t flags
                printf_indent(indent_count+1, "> uint32_t flags =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_flags->flags);
            }break;
            case 2864:{
                printf_indent(indent_count, "io_connect_unmap_memory_from_task\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t from_task;
                    NDR_record_t NDR;
                    uint32_t memory_type;
                    mach_vm_address_t address;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_from_task = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_memory_type = InP;
                __attribute__((unused)) Request *InP_address = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "> uint32_t memory_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_memory_type->memory_type);
                
                //Argument 3: task_t from_task
                printf_indent(indent_count+1, "> task_t from_task =\n");
                mach_port_t machport_from_task = InP_from_task->from_task.name;
                mach_port_name_t machport_from_task_name = 0;
                if(machport_from_task){
                if((vm_offset_t)machport_from_task > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_from_task = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_from_task, &machport_from_task_name, &ipcentry_from_task);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_from_task_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_from_task);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: mach_vm_address_t address
                printf_indent(indent_count+1, "> mach_vm_address_t address =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2865:{
                printf_indent(indent_count, "io_connect_method\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t selector;
                    mach_msg_type_number_t scalar_inputCnt;
                    io_user_scalar_t scalar_input[16];
                    mach_msg_type_number_t inband_inputCnt;
                    char inband_input[4096];
                    mach_vm_address_t ool_input;
                    mach_vm_size_t ool_input_size;
                    mach_msg_type_number_t inband_outputCnt;
                    mach_msg_type_number_t scalar_outputCnt;
                    mach_vm_address_t ool_output;
                    mach_vm_size_t ool_output_size;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_scalar_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_scalar_input = InP;
                __attribute__((unused)) mach_msg_type_number_t scalar_inputCnt = InP->scalar_inputCnt;
                msgh_size_delta = (8 * scalar_inputCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4224) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_inband_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_inband_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inband_inputCnt = InP->inband_inputCnt;
                msgh_size_delta = _WALIGN_(inband_inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_ool_input = InP;
                __attribute__((unused)) Request *InP_ool_input_size = InP;
                __attribute__((unused)) Request *InP_inband_outputCnt = InP;
                __attribute__((unused)) Request *InP_scalar_outputCnt = InP;
                __attribute__((unused)) Request *InP_ool_output = InP;
                __attribute__((unused)) Request *InP_ool_output_size = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 3: io_scalar_inband64_t scalar_input
                printf_indent(indent_count+1, "> io_scalar_inband64_t scalar_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t scalar_inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t scalar_inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_struct_inband_t inband_input
                printf_indent(indent_count+1, "> io_struct_inband_t inband_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t inband_inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inband_inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_vm_address_t ool_input
                printf_indent(indent_count+1, "> mach_vm_address_t ool_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: mach_vm_size_t ool_input_size
                printf_indent(indent_count+1, "> mach_vm_size_t ool_input_size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: io_struct_inband_t inband_output
                printf_indent(indent_count+1, "X io_struct_inband_t inband_output = (X)\n");
                
                //Argument 10: mach_msg_type_number_t *inband_outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *inband_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 11: io_scalar_inband64_t scalar_output
                printf_indent(indent_count+1, "X io_scalar_inband64_t scalar_output = (X)\n");
                
                //Argument 12: mach_msg_type_number_t *scalar_outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *scalar_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 13: mach_vm_address_t ool_output
                printf_indent(indent_count+1, "> mach_vm_address_t ool_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 14: mach_vm_size_t *ool_output_size
                printf_indent(indent_count+1, "> mach_vm_size_t *ool_output_size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2866:{
                printf_indent(indent_count, "io_connect_async_method\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t referenceCnt;
                    io_user_reference_t reference[8];
                    uint32_t selector;
                    mach_msg_type_number_t scalar_inputCnt;
                    io_user_scalar_t scalar_input[16];
                    mach_msg_type_number_t inband_inputCnt;
                    char inband_input[4096];
                    mach_vm_address_t ool_input;
                    mach_vm_size_t ool_input_size;
                    mach_msg_type_number_t inband_outputCnt;
                    mach_msg_type_number_t scalar_outputCnt;
                    mach_vm_address_t ool_output;
                    mach_vm_size_t ool_output_size;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                
                __attribute__((unused)) Request *InP_reference = InP;
                __attribute__((unused)) mach_msg_type_number_t referenceCnt = InP->referenceCnt;
                msgh_size_delta = (8 * referenceCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4288) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 64);
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_scalar_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_scalar_input = InP;
                __attribute__((unused)) mach_msg_type_number_t scalar_inputCnt = InP->scalar_inputCnt;
                msgh_size_delta = (8 * scalar_inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_inband_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_inband_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inband_inputCnt = InP->inband_inputCnt;
                msgh_size_delta = _WALIGN_(inband_inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_ool_input = InP;
                __attribute__((unused)) Request *InP_ool_input_size = InP;
                __attribute__((unused)) Request *InP_inband_outputCnt = InP;
                __attribute__((unused)) Request *InP_scalar_outputCnt = InP;
                __attribute__((unused)) Request *InP_ool_output = InP;
                __attribute__((unused)) Request *InP_ool_output_size = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 3: io_async_ref64_t reference
                printf_indent(indent_count+1, "> io_async_ref64_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 6: io_scalar_inband64_t scalar_input
                printf_indent(indent_count+1, "> io_scalar_inband64_t scalar_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t scalar_inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t scalar_inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: io_struct_inband_t inband_input
                printf_indent(indent_count+1, "> io_struct_inband_t inband_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_msg_type_number_t inband_inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inband_inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 10: mach_vm_address_t ool_input
                printf_indent(indent_count+1, "> mach_vm_address_t ool_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 11: mach_vm_size_t ool_input_size
            }break;
            case 2867:{
                printf_indent(indent_count, "io_connect_set_notification_port_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t port;
                    NDR_record_t NDR;
                    uint32_t notification_type;
                    io_user_reference_t reference;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t notification_type
                printf_indent(indent_count+1, "> uint32_t notification_type =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_notification_type->notification_type);
                
                //Argument 3: mach_port_t port
                printf_indent(indent_count+1, "> mach_port_t port =\n");
                mach_port_t machport_port = InP_port->port.name;
                mach_port_name_t machport_port_name = 0;
                if(machport_port){
                if((vm_offset_t)machport_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_port, &machport_port_name, &ipcentry_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: io_user_reference_t reference
                printf_indent(indent_count+1, "> io_user_reference_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2868:{
                printf_indent(indent_count, "io_service_add_notification_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t notification_typeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t notification_typeCnt;
                    char notification_type[128];
                    mach_msg_type_number_t matchingOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t matchingCnt;
                    char matching[512];
                    mach_msg_type_number_t referenceCnt;
                    io_user_reference_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_typeOffset = InP;
                __attribute__((unused)) Request *InP_notification_typeCnt = InP;
                
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) mach_msg_type_number_t notification_typeCnt = InP->notification_typeCnt;
                msgh_size_delta = _WALIGN_(InP->notification_typeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 704) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_matchingOffset = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) mach_msg_type_number_t matchingCnt = InP->matchingCnt;
                msgh_size_delta = _WALIGN_(InP->matchingCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 512);
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "> io_name_t notification_type =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_notification_type->notification_type);
                
                //Argument 3: io_string_t matching
                printf_indent(indent_count+1, "> io_string_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 5: io_async_ref64_t reference
                printf_indent(indent_count+1, "> io_async_ref64_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2869:{
                printf_indent(indent_count, "io_service_add_interest_notification_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t type_of_interestOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t type_of_interestCnt;
                    char type_of_interest[128];
                    mach_msg_type_number_t referenceCnt;
                    io_user_reference_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_type_of_interestOffset = InP;
                __attribute__((unused)) Request *InP_type_of_interestCnt = InP;
                
                __attribute__((unused)) Request *InP_type_of_interest = InP;
                __attribute__((unused)) mach_msg_type_number_t type_of_interestCnt = InP->type_of_interestCnt;
                msgh_size_delta = _WALIGN_(InP->type_of_interestCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 192) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t type_of_interest
                printf_indent(indent_count+1, "> io_name_t type_of_interest =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_type_of_interest->type_of_interest);
                
                //Argument 3: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 4: io_async_ref64_t reference
                printf_indent(indent_count+1, "> io_async_ref64_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2870:{
                printf_indent(indent_count, "io_service_add_notification_ool_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t matching;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t notification_typeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t notification_typeCnt;
                    char notification_type[128];
                    mach_msg_type_number_t matchingCnt;
                    mach_msg_type_number_t referenceCnt;
                    io_user_reference_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_typeOffset = InP;
                __attribute__((unused)) Request *InP_notification_typeCnt = InP;
                
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) mach_msg_type_number_t notification_typeCnt = InP->notification_typeCnt;
                msgh_size_delta = _WALIGN_(InP->notification_typeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 192) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "> io_name_t notification_type =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_notification_type->notification_type);
                
                //Argument 3: io_buf_ptr_t matching
                printf_indent(indent_count+1, "> io_buf_ptr_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 6: io_async_ref64_t reference
                printf_indent(indent_count+1, "> io_async_ref64_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
                
                //Argument 9: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2871:{
                printf_indent(indent_count, "io_registry_entry_get_registry_entry_id\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint64_t *entry_id
                printf_indent(indent_count+1, "X uint64_t *entry_id = (X)\n");
            }break;
            case 2872:{
                printf_indent(indent_count, "io_connect_method_var_output\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint32_t selector;
                    mach_msg_type_number_t scalar_inputCnt;
                    io_user_scalar_t scalar_input[16];
                    mach_msg_type_number_t inband_inputCnt;
                    char inband_input[4096];
                    mach_vm_address_t ool_input;
                    mach_vm_size_t ool_input_size;
                    mach_msg_type_number_t inband_outputCnt;
                    mach_msg_type_number_t scalar_outputCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_selector = InP;
                __attribute__((unused)) Request *InP_scalar_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_scalar_input = InP;
                __attribute__((unused)) mach_msg_type_number_t scalar_inputCnt = InP->scalar_inputCnt;
                msgh_size_delta = (8 * scalar_inputCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4224) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_inband_inputCnt = InP;
                
                __attribute__((unused)) Request *InP_inband_input = InP;
                __attribute__((unused)) mach_msg_type_number_t inband_inputCnt = InP->inband_inputCnt;
                msgh_size_delta = _WALIGN_(inband_inputCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_ool_input = InP;
                __attribute__((unused)) Request *InP_ool_input_size = InP;
                __attribute__((unused)) Request *InP_inband_outputCnt = InP;
                __attribute__((unused)) Request *InP_scalar_outputCnt = InP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "> mach_port_t connection =\n");
                mach_port_t machport_connection = machport_remote;
                mach_port_name_t machport_connection_name = 0;
                if(machport_connection){
                if((vm_offset_t)machport_connection > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_connection = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_connection, &machport_connection_name, &ipcentry_connection);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "> uint32_t selector =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_selector->selector);
                
                //Argument 3: io_scalar_inband64_t scalar_input
                printf_indent(indent_count+1, "> io_scalar_inband64_t scalar_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t scalar_inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t scalar_inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: io_struct_inband_t inband_input
                printf_indent(indent_count+1, "> io_struct_inband_t inband_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t inband_inputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t inband_inputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_vm_address_t ool_input
                printf_indent(indent_count+1, "> mach_vm_address_t ool_input =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: mach_vm_size_t ool_input_size
                printf_indent(indent_count+1, "> mach_vm_size_t ool_input_size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: io_struct_inband_t inband_output
                printf_indent(indent_count+1, "X io_struct_inband_t inband_output = (X)\n");
                
                //Argument 10: mach_msg_type_number_t *inband_outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *inband_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 11: io_scalar_inband64_t scalar_output
                printf_indent(indent_count+1, "X io_scalar_inband64_t scalar_output = (X)\n");
                
                //Argument 12: mach_msg_type_number_t *scalar_outputCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t *scalar_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 13: io_buf_ptr_t *var_output
                printf_indent(indent_count+1, "X io_buf_ptr_t *var_output = (X)\n");
                
                //Argument 14: mach_msg_type_number_t *var_outputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *var_outputCnt = (X)\n");
            }break;
            case 2873:{
                printf_indent(indent_count, "io_service_get_matching_service\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t matchingCnt;
                    char matching[512];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingOffset = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_string_t matching
                printf_indent(indent_count+1, "> io_string_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_port_t *service
                printf_indent(indent_count+1, "X mach_port_t *service = (X)\n");
            }break;
            case 2874:{
                printf_indent(indent_count, "io_service_get_matching_service_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t matching;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingCnt;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t matching
                printf_indent(indent_count+1, "> io_buf_ptr_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "X kern_return_t *result = (X)\n");
                
                //Argument 5: mach_port_t *service
                printf_indent(indent_count+1, "X mach_port_t *service = (X)\n");
            }break;
            case 2875:{
                printf_indent(indent_count, "io_service_get_authorization_id\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint64_t *authorization_id
                printf_indent(indent_count+1, "X uint64_t *authorization_id = (X)\n");
            }break;
            case 2876:{
                printf_indent(indent_count, "io_service_set_authorization_id\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    uint64_t authorization_id;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_authorization_id = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint64_t authorization_id
                printf_indent(indent_count+1, "> uint64_t authorization_id =\n");
                printf_indent(indent_count+2, "(uint64_t) 0x%llx\n", InP_authorization_id->authorization_id);
            }break;
            case 2877:{
                printf_indent(indent_count, "io_server_version\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: uint64_t *version
                printf_indent(indent_count+1, "X uint64_t *version = (X)\n");
            }break;
            case 2878:{
                printf_indent(indent_count, "io_registry_entry_get_properties_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "X io_buf_ptr_t *properties = (X)\n");
                
                //Argument 3: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *propertiesCnt = (X)\n");
            }break;
            case 2879:{
                printf_indent(indent_count, "io_registry_entry_get_property_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t planeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t planeCnt;
                    char plane[128];
                    mach_msg_type_number_t property_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t property_nameCnt;
                    char property_name[128];
                    uint32_t options;
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_planeOffset = InP;
                __attribute__((unused)) Request *InP_planeCnt = InP;
                
                __attribute__((unused)) Request *InP_plane = InP;
                __attribute__((unused)) mach_msg_type_number_t planeCnt = InP->planeCnt;
                msgh_size_delta = _WALIGN_(InP->planeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 256) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_property_nameOffset = InP;
                __attribute__((unused)) Request *InP_property_nameCnt = InP;
                
                __attribute__((unused)) Request *InP_property_name = InP;
                __attribute__((unused)) mach_msg_type_number_t property_nameCnt = InP->property_nameCnt;
                msgh_size_delta = _WALIGN_(InP->property_nameCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_options = InP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "> mach_port_t registry_entry =\n");
                mach_port_t machport_registry_entry = machport_remote;
                mach_port_name_t machport_registry_entry_name = 0;
                if(machport_registry_entry){
                if((vm_offset_t)machport_registry_entry > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_registry_entry = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_registry_entry, &machport_registry_entry_name, &ipcentry_registry_entry);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "> io_name_t plane =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_plane->plane);
                
                //Argument 3: io_name_t property_name
                printf_indent(indent_count+1, "> io_name_t property_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_property_name->property_name);
                
                //Argument 4: uint32_t options
                printf_indent(indent_count+1, "> uint32_t options =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", InP_options->options);
                
                //Argument 5: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "X io_buf_ptr_t *properties = (X)\n");
                
                //Argument 6: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t *propertiesCnt = (X)\n");
            }break;
            case 2880:{
                printf_indent(indent_count, "io_service_get_matching_service_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingCnt;
                    char matching[4096];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_struct_inband_t matching
                printf_indent(indent_count+1, "> io_struct_inband_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_port_t *service
                printf_indent(indent_count+1, "X mach_port_t *service = (X)\n");
            }break;
            case 2881:{
                printf_indent(indent_count, "io_service_get_matching_services_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingCnt;
                    char matching[4096];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_struct_inband_t matching
                printf_indent(indent_count+1, "> io_struct_inband_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_port_t *existing
                printf_indent(indent_count+1, "X mach_port_t *existing = (X)\n");
            }break;
            case 2882:{
                printf_indent(indent_count, "io_service_match_property_table_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    mach_msg_type_number_t matchingCnt;
                    char matching[4096];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                __attribute__((unused)) Request *InP_matching = InP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "> mach_port_t service =\n");
                mach_port_t machport_service = machport_remote;
                mach_port_name_t machport_service_name = 0;
                if(machport_service){
                if((vm_offset_t)machport_service > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_service = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_service, &machport_service_name, &ipcentry_service);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_struct_inband_t matching
                printf_indent(indent_count+1, "> io_struct_inband_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: boolean_t *matches
                printf_indent(indent_count+1, "X boolean_t *matches = (X)\n");
            }break;
            case 2883:{
                printf_indent(indent_count, "io_service_add_notification_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t notification_typeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t notification_typeCnt;
                    char notification_type[128];
                    mach_msg_type_number_t matchingCnt;
                    char matching[4096];
                    mach_msg_type_number_t referenceCnt;
                    natural_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_typeOffset = InP;
                __attribute__((unused)) Request *InP_notification_typeCnt = InP;
                
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) mach_msg_type_number_t notification_typeCnt = InP->notification_typeCnt;
                msgh_size_delta = _WALIGN_(InP->notification_typeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4256) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) mach_msg_type_number_t matchingCnt = InP->matchingCnt;
                msgh_size_delta = _WALIGN_(matchingCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "> io_name_t notification_type =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_notification_type->notification_type);
                
                //Argument 3: io_struct_inband_t matching
                printf_indent(indent_count+1, "> io_struct_inband_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 6: io_async_ref_t reference
                printf_indent(indent_count+1, "> io_async_ref_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
            case 2884:{
                printf_indent(indent_count, "io_service_add_notification_bin_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t wake_port;
                    NDR_record_t NDR;
                    mach_msg_type_number_t notification_typeOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t notification_typeCnt;
                    char notification_type[128];
                    mach_msg_type_number_t matchingCnt;
                    char matching[4096];
                    mach_msg_type_number_t referenceCnt;
                    io_user_reference_t reference[8];
                } Request __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Request *InP = (Request *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                
                __attribute__((unused)) Request *InP_msgh_body = InP;
                __attribute__((unused)) Request *InP_wake_port = InP;
                __attribute__((unused)) Request *InP_NDR = InP;
                __attribute__((unused)) Request *InP_notification_typeOffset = InP;
                __attribute__((unused)) Request *InP_notification_typeCnt = InP;
                
                __attribute__((unused)) Request *InP_notification_type = InP;
                __attribute__((unused)) mach_msg_type_number_t notification_typeCnt = InP->notification_typeCnt;
                msgh_size_delta = _WALIGN_(InP->notification_typeCnt);
                	msgh_size = (mach_msg_size_t)(sizeof(Request) - 4288) + msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 128);
                __attribute__((unused)) Request *InP_matchingCnt = InP;
                
                __attribute__((unused)) Request *InP_matching = InP;
                __attribute__((unused)) mach_msg_type_number_t matchingCnt = InP->matchingCnt;
                msgh_size_delta = _WALIGN_(matchingCnt);
                	msgh_size += msgh_size_delta;
                	InP = (Request *) ((pointer_t) InP + msgh_size_delta - 4096);
                __attribute__((unused)) Request *InP_referenceCnt = InP;
                __attribute__((unused)) Request *InP_reference = InP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "> mach_port_t master_port =\n");
                mach_port_t machport_master_port = machport_remote;
                mach_port_name_t machport_master_port_name = 0;
                if(machport_master_port){
                if((vm_offset_t)machport_master_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_master_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_master_port, &machport_master_port_name, &ipcentry_master_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_master_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_master_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "> io_name_t notification_type =\n");
                printf_indent(indent_count+2, "(char*) %s\n", InP_notification_type->notification_type);
                
                //Argument 3: io_struct_inband_t matching
                printf_indent(indent_count+1, "> io_struct_inband_t matching =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t matchingCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "> mach_port_t wake_port =\n");
                mach_port_t machport_wake_port = InP_wake_port->wake_port.name;
                mach_port_name_t machport_wake_port_name = 0;
                if(machport_wake_port){
                if((vm_offset_t)machport_wake_port > VM_MIN_KERNEL_ADDRESS){
                ipc_entry_t ipcentry_wake_port = NULL;
                is_write_lock(space);
                ipc_hash_lookup(space, (ipc_object_t)machport_wake_port, &machport_wake_port_name, &ipcentry_wake_port);
                is_write_unlock(space);
                }
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_wake_port_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_wake_port);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
                
                //Argument 6: io_async_ref64_t reference
                printf_indent(indent_count+1, "> io_async_ref64_t reference =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "> mach_msg_type_number_t referenceCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: mach_port_t *notification
                printf_indent(indent_count+1, "X mach_port_t *notification = (X)\n");
            }break;
        }
    }
    printf_indent(indent_count, "\n");
}
void migtest_copyout(ipc_kmsg_t kmsg, ipc_space_t space){
    int indent_count = 0;
    #define _WALIGN_(x) (((x) + 3) & ~3)
    __attribute__((unused)) mach_msg_header_t *machmsg_head = kmsg->ikm_header;
    __attribute__((unused)) struct ipc_port *machport_local = machmsg_head->msgh_local_port;
    __attribute__((unused)) struct ipc_port *machport_remote = machmsg_head->msgh_remote_port;
    
    printf_indent(indent_count, "(RECV)");

    mach_msg_id_t requesting_msgh_id = machmsg_head->msgh_id - 100;
    if(requesting_msgh_id >= 2800 && requesting_msgh_id <= 2884){
        switch (requesting_msgh_id) {
            case 2800:{
                printf_indent(indent_count, "io_object_get_class\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t classNameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t classNameCnt;
                    char className[128];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_classNameOffset = OutP;
                __attribute__((unused)) Reply *OutP_classNameCnt = OutP;
                __attribute__((unused)) Reply *OutP_className = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t object
                printf_indent(indent_count+1, "X mach_port_t object = (X)\n");
                
                //Argument 2: io_name_t className
                printf_indent(indent_count+1, "< io_name_t className =\n");
                printf_indent(indent_count+2, "(char*) %s\n", OutP_className->className);
            }break;
            case 2801:{
                printf_indent(indent_count, "io_object_conforms_to\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    boolean_t conforms;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_conforms = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t object
                printf_indent(indent_count+1, "X mach_port_t object = (X)\n");
                
                //Argument 2: io_name_t className
                printf_indent(indent_count+1, "X io_name_t className = (X)\n");
                
                //Argument 3: boolean_t *conforms
                printf_indent(indent_count+1, "< boolean_t *conforms =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2802:{
                printf_indent(indent_count, "io_iterator_next\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t object;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_object = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "X mach_port_t iterator = (X)\n");
                
                //Argument 2: mach_port_t *object
                printf_indent(indent_count+1, "< mach_port_t *object =\n");
                mach_port_t machport_object = NULL;
                mach_port_name_t machport_object_name = (mach_port_name_t)OutP_object->object.name;
                if(machport_object_name){
                ipc_entry_t ipcentry_object = ipc_entry_lookup(space, machport_object_name);
                if(ipcentry_object)
                machport_object = (struct ipc_port*)(ipcentry_object->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_object_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_object);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2803:{
                printf_indent(indent_count, "io_iterator_reset\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "X mach_port_t iterator = (X)\n");
            }break;
            case 2804:{
                printf_indent(indent_count, "io_service_get_matching_services\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t existing;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_existing = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_string_t matching
                printf_indent(indent_count+1, "X io_string_t matching = (X)\n");
                
                //Argument 3: mach_port_t *existing
                printf_indent(indent_count+1, "< mach_port_t *existing =\n");
                mach_port_t machport_existing = NULL;
                mach_port_name_t machport_existing_name = (mach_port_name_t)OutP_existing->existing.name;
                if(machport_existing_name){
                ipc_entry_t ipcentry_existing = ipc_entry_lookup(space, machport_existing_name);
                if(ipcentry_existing)
                machport_existing = (struct ipc_port*)(ipcentry_existing->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_existing_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_existing);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2805:{
                printf_indent(indent_count, "io_registry_entry_get_property\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_properties = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_propertiesCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t property_name
                printf_indent(indent_count+1, "X io_name_t property_name = (X)\n");
                
                //Argument 3: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "< io_buf_ptr_t *properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2806:{
                printf_indent(indent_count, "io_registry_create_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t iterator;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_iterator = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: uint32_t options
                printf_indent(indent_count+1, "X uint32_t options = (X)\n");
                
                //Argument 4: mach_port_t *iterator
                printf_indent(indent_count+1, "< mach_port_t *iterator =\n");
                mach_port_t machport_iterator = NULL;
                mach_port_name_t machport_iterator_name = (mach_port_name_t)OutP_iterator->iterator.name;
                if(machport_iterator_name){
                ipc_entry_t ipcentry_iterator = ipc_entry_lookup(space, machport_iterator_name);
                if(ipcentry_iterator)
                machport_iterator = (struct ipc_port*)(ipcentry_iterator->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2807:{
                printf_indent(indent_count, "io_registry_iterator_enter_entry\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "X mach_port_t iterator = (X)\n");
            }break;
            case 2808:{
                printf_indent(indent_count, "io_registry_iterator_exit_entry\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "X mach_port_t iterator = (X)\n");
            }break;
            case 2809:{
                printf_indent(indent_count, "io_registry_entry_from_path\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t registry_entry;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_registry_entry = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_string_t path
                printf_indent(indent_count+1, "X io_string_t path = (X)\n");
                
                //Argument 3: mach_port_t *registry_entry
                printf_indent(indent_count+1, "< mach_port_t *registry_entry =\n");
                mach_port_t machport_registry_entry = NULL;
                mach_port_name_t machport_registry_entry_name = (mach_port_name_t)OutP_registry_entry->registry_entry.name;
                if(machport_registry_entry_name){
                ipc_entry_t ipcentry_registry_entry = ipc_entry_lookup(space, machport_registry_entry_name);
                if(ipcentry_registry_entry)
                machport_registry_entry = (struct ipc_port*)(ipcentry_registry_entry->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_registry_entry_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_registry_entry);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2810:{
                printf_indent(indent_count, "io_registry_entry_get_name\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t nameCnt;
                    char name[128];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_nameOffset = OutP;
                __attribute__((unused)) Reply *OutP_nameCnt = OutP;
                __attribute__((unused)) Reply *OutP_name = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t name
                printf_indent(indent_count+1, "< io_name_t name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", OutP_name->name);
            }break;
            case 2811:{
                printf_indent(indent_count, "io_registry_entry_get_properties\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_properties = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_propertiesCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "< io_buf_ptr_t *properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2812:{
                printf_indent(indent_count, "io_registry_entry_get_property_bytes\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t dataCnt;
                    char data[4096];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_dataCnt = OutP;
                __attribute__((unused)) Reply *OutP_data = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t property_name
                printf_indent(indent_count+1, "X io_name_t property_name = (X)\n");
                
                //Argument 3: io_struct_inband_t data
                printf_indent(indent_count+1, "< io_struct_inband_t data =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t *dataCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *dataCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2813:{
                printf_indent(indent_count, "io_registry_entry_get_child_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t iterator;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_iterator = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: mach_port_t *iterator
                printf_indent(indent_count+1, "< mach_port_t *iterator =\n");
                mach_port_t machport_iterator = NULL;
                mach_port_name_t machport_iterator_name = (mach_port_name_t)OutP_iterator->iterator.name;
                if(machport_iterator_name){
                ipc_entry_t ipcentry_iterator = ipc_entry_lookup(space, machport_iterator_name);
                if(ipcentry_iterator)
                machport_iterator = (struct ipc_port*)(ipcentry_iterator->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2814:{
                printf_indent(indent_count, "io_registry_entry_get_parent_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t iterator;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_iterator = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: mach_port_t *iterator
                printf_indent(indent_count+1, "< mach_port_t *iterator =\n");
                mach_port_t machport_iterator = NULL;
                mach_port_name_t machport_iterator_name = (mach_port_name_t)OutP_iterator->iterator.name;
                if(machport_iterator_name){
                ipc_entry_t ipcentry_iterator = ipc_entry_lookup(space, machport_iterator_name);
                if(ipcentry_iterator)
                machport_iterator = (struct ipc_port*)(ipcentry_iterator->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2816:{
                printf_indent(indent_count, "io_service_close\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
            }break;
            case 2817:{
                printf_indent(indent_count, "io_connect_get_service\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t service;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_service = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t *service
                printf_indent(indent_count+1, "< mach_port_t *service =\n");
                mach_port_t machport_service = NULL;
                mach_port_name_t machport_service_name = (mach_port_name_t)OutP_service->service.name;
                if(machport_service_name){
                ipc_entry_t ipcentry_service = ipc_entry_lookup(space, machport_service_name);
                if(ipcentry_service)
                machport_service = (struct ipc_port*)(ipcentry_service->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2818:{
                printf_indent(indent_count, "io_connect_set_notification_port\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t notification_type
                printf_indent(indent_count+1, "X uint32_t notification_type = (X)\n");
                
                //Argument 3: mach_port_t port
                printf_indent(indent_count+1, "X mach_port_t port = (X)\n");
                
                //Argument 4: uint32_t reference
                printf_indent(indent_count+1, "X uint32_t reference = (X)\n");
            }break;
            case 2819:{
                printf_indent(indent_count, "io_connect_map_memory\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint32_t address;
                    uint32_t size;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_address = OutP;
                __attribute__((unused)) Reply *OutP_size = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "X uint32_t memory_type = (X)\n");
                
                //Argument 3: task_t into_task
                printf_indent(indent_count+1, "X task_t into_task = (X)\n");
                
                //Argument 4: uint32_t *address
                printf_indent(indent_count+1, "< uint32_t *address =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", OutP_address->address);
                
                //Argument 5: uint32_t *size
                printf_indent(indent_count+1, "< uint32_t *size =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", OutP_size->size);
                
                //Argument 6: uint32_t flags
                printf_indent(indent_count+1, "X uint32_t flags = (X)\n");
            }break;
            case 2820:{
                printf_indent(indent_count, "io_connect_add_client\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t connect_to
                printf_indent(indent_count+1, "X mach_port_t connect_to = (X)\n");
            }break;
            case 2821:{
                printf_indent(indent_count, "io_connect_set_properties\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: io_buf_ptr_t properties
                printf_indent(indent_count+1, "X io_buf_ptr_t properties = (X)\n");
                
                //Argument 3: mach_msg_type_number_t propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t propertiesCnt = (X)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2822:{
                printf_indent(indent_count, "io_connect_method_scalarI_scalarO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t outputCnt;
                    int output[16];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_output = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 3: io_scalar_inband_t input
                printf_indent(indent_count+1, "X io_scalar_inband_t input = (X)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 5: io_scalar_inband_t output
                printf_indent(indent_count+1, "< io_scalar_inband_t output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2823:{
                printf_indent(indent_count, "io_connect_method_scalarI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t outputCnt;
                    char output[4096];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_output = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 3: io_scalar_inband_t input
                printf_indent(indent_count+1, "X io_scalar_inband_t input = (X)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 5: io_struct_inband_t output
                printf_indent(indent_count+1, "< io_struct_inband_t output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2824:{
                printf_indent(indent_count, "io_connect_method_scalarI_structureI\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 3: io_scalar_inband_t input
                printf_indent(indent_count+1, "X io_scalar_inband_t input = (X)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 5: io_struct_inband_t inputStruct
                printf_indent(indent_count+1, "X io_struct_inband_t inputStruct = (X)\n");
                
                //Argument 6: mach_msg_type_number_t inputStructCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputStructCnt = (X)\n");
            }break;
            case 2825:{
                printf_indent(indent_count, "io_connect_method_structureI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t outputCnt;
                    char output[4096];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_output = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 3: io_struct_inband_t input
                printf_indent(indent_count+1, "X io_struct_inband_t input = (X)\n");
                
                //Argument 4: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 5: io_struct_inband_t output
                printf_indent(indent_count+1, "< io_struct_inband_t output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2826:{
                printf_indent(indent_count, "io_registry_entry_get_path\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t pathOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t pathCnt;
                    char path[512];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_pathOffset = OutP;
                __attribute__((unused)) Reply *OutP_pathCnt = OutP;
                __attribute__((unused)) Reply *OutP_path = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: io_string_t path
                printf_indent(indent_count+1, "< io_string_t path =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2827:{
                printf_indent(indent_count, "io_registry_get_root_entry\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t root;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_root = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: mach_port_t *root
                printf_indent(indent_count+1, "< mach_port_t *root =\n");
                mach_port_t machport_root = NULL;
                mach_port_name_t machport_root_name = (mach_port_name_t)OutP_root->root.name;
                if(machport_root_name){
                ipc_entry_t ipcentry_root = ipc_entry_lookup(space, machport_root_name);
                if(ipcentry_root)
                machport_root = (struct ipc_port*)(ipcentry_root->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_root_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_root);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2828:{
                printf_indent(indent_count, "io_registry_entry_set_properties\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_buf_ptr_t properties
                printf_indent(indent_count+1, "X io_buf_ptr_t properties = (X)\n");
                
                //Argument 3: mach_msg_type_number_t propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t propertiesCnt = (X)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2829:{
                printf_indent(indent_count, "io_registry_entry_in_plane\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    boolean_t inPlane;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_inPlane = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: boolean_t *inPlane
                printf_indent(indent_count+1, "< boolean_t *inPlane =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2830:{
                printf_indent(indent_count, "io_object_get_retain_count\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint32_t retainCount;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_retainCount = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t object
                printf_indent(indent_count+1, "X mach_port_t object = (X)\n");
                
                //Argument 2: uint32_t *retainCount
                printf_indent(indent_count+1, "< uint32_t *retainCount =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", OutP_retainCount->retainCount);
            }break;
            case 2831:{
                printf_indent(indent_count, "io_service_get_busy_state\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint32_t busyState;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_busyState = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: uint32_t *busyState
                printf_indent(indent_count+1, "< uint32_t *busyState =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", OutP_busyState->busyState);
            }break;
            case 2832:{
                printf_indent(indent_count, "io_service_wait_quiet\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: mach_timespec_t wait_time
                printf_indent(indent_count+1, "X mach_timespec_t wait_time = (X)\n");
            }break;
            case 2833:{
                printf_indent(indent_count, "io_registry_entry_create_iterator\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t iterator;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_iterator = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: uint32_t options
                printf_indent(indent_count+1, "X uint32_t options = (X)\n");
                
                //Argument 4: mach_port_t *iterator
                printf_indent(indent_count+1, "< mach_port_t *iterator =\n");
                mach_port_t machport_iterator = NULL;
                mach_port_name_t machport_iterator_name = (mach_port_name_t)OutP_iterator->iterator.name;
                if(machport_iterator_name){
                ipc_entry_t ipcentry_iterator = ipc_entry_lookup(space, machport_iterator_name);
                if(ipcentry_iterator)
                machport_iterator = (struct ipc_port*)(ipcentry_iterator->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_iterator_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_iterator);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2834:{
                printf_indent(indent_count, "io_iterator_is_valid\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    boolean_t is_valid;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_is_valid = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t iterator
                printf_indent(indent_count+1, "X mach_port_t iterator = (X)\n");
                
                //Argument 2: boolean_t *is_valid
                printf_indent(indent_count+1, "< boolean_t *is_valid =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2836:{
                printf_indent(indent_count, "io_catalog_send_data\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "X uint32_t flag = (X)\n");
                
                //Argument 3: io_buf_ptr_t inData
                printf_indent(indent_count+1, "X io_buf_ptr_t inData = (X)\n");
                
                //Argument 4: mach_msg_type_number_t inDataCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inDataCnt = (X)\n");
                
                //Argument 5: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2837:{
                printf_indent(indent_count, "io_catalog_terminate\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "X uint32_t flag = (X)\n");
                
                //Argument 3: io_name_t name
                printf_indent(indent_count+1, "X io_name_t name = (X)\n");
            }break;
            case 2838:{
                printf_indent(indent_count, "io_catalog_get_data\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t outData;
                    NDR_record_t NDR;
                    mach_msg_type_number_t outDataCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_outData = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_outDataCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "X uint32_t flag = (X)\n");
                
                //Argument 3: io_buf_ptr_t *outData
                printf_indent(indent_count+1, "< io_buf_ptr_t *outData =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 4: mach_msg_type_number_t *outDataCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outDataCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2839:{
                printf_indent(indent_count, "io_catalog_get_gen_count\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint32_t genCount;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_genCount = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: uint32_t *genCount
                printf_indent(indent_count+1, "< uint32_t *genCount =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", OutP_genCount->genCount);
            }break;
            case 2840:{
                printf_indent(indent_count, "io_catalog_module_loaded\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t name
                printf_indent(indent_count+1, "X io_name_t name = (X)\n");
            }break;
            case 2841:{
                printf_indent(indent_count, "io_catalog_reset\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: uint32_t flag
                printf_indent(indent_count+1, "X uint32_t flag = (X)\n");
            }break;
            case 2842:{
                printf_indent(indent_count, "io_service_request_probe\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: uint32_t options
                printf_indent(indent_count+1, "X uint32_t options = (X)\n");
            }break;
            case 2843:{
                printf_indent(indent_count, "io_registry_entry_get_name_in_plane\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t nameCnt;
                    char name[128];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_nameOffset = OutP;
                __attribute__((unused)) Reply *OutP_nameCnt = OutP;
                __attribute__((unused)) Reply *OutP_name = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: io_name_t name
                printf_indent(indent_count+1, "< io_name_t name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", OutP_name->name);
            }break;
            case 2844:{
                printf_indent(indent_count, "io_service_match_property_table\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    boolean_t matches;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_matches = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: io_string_t matching
                printf_indent(indent_count+1, "X io_string_t matching = (X)\n");
                
                //Argument 3: boolean_t *matches
                printf_indent(indent_count+1, "< boolean_t *matches =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2845:{
                printf_indent(indent_count, "io_async_method_scalarI_scalarO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t outputCnt;
                    int output[16];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_output = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 6: io_scalar_inband_t input
                printf_indent(indent_count+1, "X io_scalar_inband_t input = (X)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 8: io_scalar_inband_t output
                printf_indent(indent_count+1, "< io_scalar_inband_t output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2846:{
                printf_indent(indent_count, "io_async_method_scalarI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t outputCnt;
                    char output[4096];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_output = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 6: io_scalar_inband_t input
                printf_indent(indent_count+1, "X io_scalar_inband_t input = (X)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 8: io_struct_inband_t output
                printf_indent(indent_count+1, "< io_struct_inband_t output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2847:{
                printf_indent(indent_count, "io_async_method_scalarI_structureI\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 6: io_scalar_inband_t input
                printf_indent(indent_count+1, "X io_scalar_inband_t input = (X)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 8: io_struct_inband_t inputStruct
                printf_indent(indent_count+1, "X io_struct_inband_t inputStruct = (X)\n");
                
                //Argument 9: mach_msg_type_number_t inputStructCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputStructCnt = (X)\n");
            }break;
            case 2848:{
                printf_indent(indent_count, "io_async_method_structureI_structureO\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t outputCnt;
                    char output[4096];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_output = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 3: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 6: io_struct_inband_t input
                printf_indent(indent_count+1, "X io_struct_inband_t input = (X)\n");
                
                //Argument 7: mach_msg_type_number_t inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inputCnt = (X)\n");
                
                //Argument 8: io_struct_inband_t output
                printf_indent(indent_count+1, "< io_struct_inband_t output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_msg_type_number_t *outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2849:{
                printf_indent(indent_count, "io_service_add_notification\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "X io_name_t notification_type = (X)\n");
                
                //Argument 3: io_string_t matching
                printf_indent(indent_count+1, "X io_string_t matching = (X)\n");
                
                //Argument 4: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 5: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 6: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 7: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2850:{
                printf_indent(indent_count, "io_service_add_interest_notification\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: io_name_t type_of_interest
                printf_indent(indent_count+1, "X io_name_t type_of_interest = (X)\n");
                
                //Argument 3: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 4: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 5: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 6: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2851:{
                printf_indent(indent_count, "io_service_acknowledge_notification\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: natural_t notify_ref
                printf_indent(indent_count+1, "X natural_t notify_ref = (X)\n");
                
                //Argument 3: natural_t response
                printf_indent(indent_count+1, "X natural_t response = (X)\n");
            }break;
            case 2852:{
                printf_indent(indent_count, "io_connect_get_notification_semaphore\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t semaphore;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_semaphore = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: natural_t notification_type
                printf_indent(indent_count+1, "X natural_t notification_type = (X)\n");
                
                //Argument 3: semaphore_t *semaphore
                printf_indent(indent_count+1, "< semaphore_t *semaphore =\n");
                mach_port_t machport_semaphore = NULL;
                mach_port_name_t machport_semaphore_name = (mach_port_name_t)OutP_semaphore->semaphore.name;
                if(machport_semaphore_name){
                ipc_entry_t ipcentry_semaphore = ipc_entry_lookup(space, machport_semaphore_name);
                if(ipcentry_semaphore)
                machport_semaphore = (struct ipc_port*)(ipcentry_semaphore->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_semaphore_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_semaphore);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2853:{
                printf_indent(indent_count, "io_connect_unmap_memory\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "X uint32_t memory_type = (X)\n");
                
                //Argument 3: task_t into_task
                printf_indent(indent_count+1, "X task_t into_task = (X)\n");
                
                //Argument 4: uint32_t address
                printf_indent(indent_count+1, "X uint32_t address = (X)\n");
            }break;
            case 2854:{
                printf_indent(indent_count, "io_registry_entry_get_location_in_plane\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t locationOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t locationCnt;
                    char location[128];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_locationOffset = OutP;
                __attribute__((unused)) Reply *OutP_locationCnt = OutP;
                __attribute__((unused)) Reply *OutP_location = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: io_name_t location
                printf_indent(indent_count+1, "< io_name_t location =\n");
                printf_indent(indent_count+2, "(char*) %s\n", OutP_location->location);
            }break;
            case 2855:{
                printf_indent(indent_count, "io_registry_entry_get_property_recursively\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_properties = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_propertiesCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: io_name_t property_name
                printf_indent(indent_count+1, "X io_name_t property_name = (X)\n");
                
                //Argument 4: uint32_t options
                printf_indent(indent_count+1, "X uint32_t options = (X)\n");
                
                //Argument 5: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "< io_buf_ptr_t *properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2856:{
                printf_indent(indent_count, "io_service_get_state\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint64_t state;
                    uint32_t busy_state;
                    uint64_t accumulated_busy_time;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_state = OutP;
                __attribute__((unused)) Reply *OutP_busy_state = OutP;
                __attribute__((unused)) Reply *OutP_accumulated_busy_time = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: uint64_t *state
                printf_indent(indent_count+1, "< uint64_t *state =\n");
                printf_indent(indent_count+2, "(uint64_t) 0x%llx\n", OutP_state->state);
                
                //Argument 3: uint32_t *busy_state
                printf_indent(indent_count+1, "< uint32_t *busy_state =\n");
                printf_indent(indent_count+2, "(uint32_t) 0x%x\n", OutP_busy_state->busy_state);
                
                //Argument 4: uint64_t *accumulated_busy_time
                printf_indent(indent_count+1, "< uint64_t *accumulated_busy_time =\n");
                printf_indent(indent_count+2, "(uint64_t) 0x%llx\n", OutP_accumulated_busy_time->accumulated_busy_time);
            }break;
            case 2857:{
                printf_indent(indent_count, "io_service_get_matching_services_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t existing;
                    NDR_record_t NDR;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_existing = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_buf_ptr_t matching
                printf_indent(indent_count+1, "X io_buf_ptr_t matching = (X)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_port_t *existing
                printf_indent(indent_count+1, "< mach_port_t *existing =\n");
                mach_port_t machport_existing = NULL;
                mach_port_name_t machport_existing_name = (mach_port_name_t)OutP_existing->existing.name;
                if(machport_existing_name){
                ipc_entry_t ipcentry_existing = ipc_entry_lookup(space, machport_existing_name);
                if(ipcentry_existing)
                machport_existing = (struct ipc_port*)(ipcentry_existing->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_existing_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_existing);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2858:{
                printf_indent(indent_count, "io_service_match_property_table_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    kern_return_t result;
                    boolean_t matches;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_matches = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: io_buf_ptr_t matching
                printf_indent(indent_count+1, "X io_buf_ptr_t matching = (X)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: boolean_t *matches
                printf_indent(indent_count+1, "< boolean_t *matches =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2859:{
                printf_indent(indent_count, "io_service_add_notification_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                    NDR_record_t NDR;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "X io_name_t notification_type = (X)\n");
                
                //Argument 3: io_buf_ptr_t matching
                printf_indent(indent_count+1, "X io_buf_ptr_t matching = (X)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 6: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 8: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2860:{
                printf_indent(indent_count, "io_object_get_superclass\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t class_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t class_nameCnt;
                    char class_name[128];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_class_nameOffset = OutP;
                __attribute__((unused)) Reply *OutP_class_nameCnt = OutP;
                __attribute__((unused)) Reply *OutP_class_name = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t obj_name
                printf_indent(indent_count+1, "X io_name_t obj_name = (X)\n");
                
                //Argument 3: io_name_t class_name
                printf_indent(indent_count+1, "< io_name_t class_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", OutP_class_name->class_name);
            }break;
            case 2861:{
                printf_indent(indent_count, "io_object_get_bundle_identifier\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t class_nameOffset; /* MiG doesn't use it */
                    mach_msg_type_number_t class_nameCnt;
                    char class_name[128];
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_class_nameOffset = OutP;
                __attribute__((unused)) Reply *OutP_class_nameCnt = OutP;
                __attribute__((unused)) Reply *OutP_class_name = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t obj_name
                printf_indent(indent_count+1, "X io_name_t obj_name = (X)\n");
                
                //Argument 3: io_name_t class_name
                printf_indent(indent_count+1, "< io_name_t class_name =\n");
                printf_indent(indent_count+2, "(char*) %s\n", OutP_class_name->class_name);
            }break;
            case 2862:{
                printf_indent(indent_count, "io_service_open_extended\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t connection;
                    NDR_record_t NDR;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_connection = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: task_t owningTask
                printf_indent(indent_count+1, "X task_t owningTask = (X)\n");
                
                //Argument 3: uint32_t connect_type
                printf_indent(indent_count+1, "X uint32_t connect_type = (X)\n");
                
                //Argument 4: NDR_record_t ndr
                printf_indent(indent_count+1, "X NDR_record_t ndr = (X)\n");
                
                //Argument 5: io_buf_ptr_t properties
                printf_indent(indent_count+1, "X io_buf_ptr_t properties = (X)\n");
                
                //Argument 6: mach_msg_type_number_t propertiesCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t propertiesCnt = (X)\n");
                
                //Argument 7: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 8: mach_port_t *connection
                printf_indent(indent_count+1, "< mach_port_t *connection =\n");
                mach_port_t machport_connection = NULL;
                mach_port_name_t machport_connection_name = (mach_port_name_t)OutP_connection->connection.name;
                if(machport_connection_name){
                ipc_entry_t ipcentry_connection = ipc_entry_lookup(space, machport_connection_name);
                if(ipcentry_connection)
                machport_connection = (struct ipc_port*)(ipcentry_connection->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_connection_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_connection);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2863:{
                printf_indent(indent_count, "io_connect_map_memory_into_task\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_vm_address_t address;
                    mach_vm_size_t size;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_address = OutP;
                __attribute__((unused)) Reply *OutP_size = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "X uint32_t memory_type = (X)\n");
                
                //Argument 3: task_t into_task
                printf_indent(indent_count+1, "X task_t into_task = (X)\n");
                
                //Argument 4: mach_vm_address_t *address
                printf_indent(indent_count+1, "< mach_vm_address_t *address =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_vm_size_t *size
                printf_indent(indent_count+1, "< mach_vm_size_t *size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: uint32_t flags
                printf_indent(indent_count+1, "X uint32_t flags = (X)\n");
            }break;
            case 2864:{
                printf_indent(indent_count, "io_connect_unmap_memory_from_task\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t memory_type
                printf_indent(indent_count+1, "X uint32_t memory_type = (X)\n");
                
                //Argument 3: task_t from_task
                printf_indent(indent_count+1, "X task_t from_task = (X)\n");
                
                //Argument 4: mach_vm_address_t address
                printf_indent(indent_count+1, "X mach_vm_address_t address = (X)\n");
            }break;
            case 2865:{
                printf_indent(indent_count, "io_connect_method\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t inband_outputCnt;
                    char inband_output[4096];
                    mach_msg_type_number_t scalar_outputCnt;
                    io_user_scalar_t scalar_output[16];
                    mach_vm_size_t ool_output_size;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_inband_outputCnt = OutP;
                
                __attribute__((unused)) Reply *OutP_inband_output = OutP;
                __attribute__((unused)) mach_msg_type_number_t inband_outputCnt = OutP->inband_outputCnt;
                msgh_size_delta = _WALIGN_(OutP->inband_outputCnt);
                OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 4096);
                __attribute__((unused)) Reply *OutP_scalar_outputCnt = OutP;
                
                __attribute__((unused)) Reply *OutP_scalar_output = OutP;
                __attribute__((unused)) mach_msg_type_number_t scalar_outputCnt = OutP->scalar_outputCnt;
                msgh_size_delta = OutP->scalar_outputCnt * 8;
                OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 128);
                __attribute__((unused)) Reply *OutP_ool_output_size = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 3: io_scalar_inband64_t scalar_input
                printf_indent(indent_count+1, "X io_scalar_inband64_t scalar_input = (X)\n");
                
                //Argument 4: mach_msg_type_number_t scalar_inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t scalar_inputCnt = (X)\n");
                
                //Argument 5: io_struct_inband_t inband_input
                printf_indent(indent_count+1, "X io_struct_inband_t inband_input = (X)\n");
                
                //Argument 6: mach_msg_type_number_t inband_inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inband_inputCnt = (X)\n");
                
                //Argument 7: mach_vm_address_t ool_input
                printf_indent(indent_count+1, "X mach_vm_address_t ool_input = (X)\n");
                
                //Argument 8: mach_vm_size_t ool_input_size
                printf_indent(indent_count+1, "X mach_vm_size_t ool_input_size = (X)\n");
                
                //Argument 9: io_struct_inband_t inband_output
                printf_indent(indent_count+1, "< io_struct_inband_t inband_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 10: mach_msg_type_number_t *inband_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *inband_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 11: io_scalar_inband64_t scalar_output
                printf_indent(indent_count+1, "< io_scalar_inband64_t scalar_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 12: mach_msg_type_number_t *scalar_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *scalar_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 13: mach_vm_address_t ool_output
                printf_indent(indent_count+1, "X mach_vm_address_t ool_output = (X)\n");
                
                //Argument 14: mach_vm_size_t *ool_output_size
                printf_indent(indent_count+1, "< mach_vm_size_t *ool_output_size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2866:{
                printf_indent(indent_count, "io_connect_async_method\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    mach_msg_type_number_t inband_outputCnt;
                    char inband_output[4096];
                    mach_msg_type_number_t scalar_outputCnt;
                    io_user_scalar_t scalar_output[16];
                    mach_vm_size_t ool_output_size;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_inband_outputCnt = OutP;
                
                __attribute__((unused)) Reply *OutP_inband_output = OutP;
                __attribute__((unused)) mach_msg_type_number_t inband_outputCnt = OutP->inband_outputCnt;
                msgh_size_delta = _WALIGN_(OutP->inband_outputCnt);
                OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 4096);
                __attribute__((unused)) Reply *OutP_scalar_outputCnt = OutP;
                
                __attribute__((unused)) Reply *OutP_scalar_output = OutP;
                __attribute__((unused)) mach_msg_type_number_t scalar_outputCnt = OutP->scalar_outputCnt;
                msgh_size_delta = OutP->scalar_outputCnt * 8;
                OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 128);
                __attribute__((unused)) Reply *OutP_ool_output_size = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 3: io_async_ref64_t reference
                printf_indent(indent_count+1, "X io_async_ref64_t reference = (X)\n");
                
                //Argument 4: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 5: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 6: io_scalar_inband64_t scalar_input
                printf_indent(indent_count+1, "X io_scalar_inband64_t scalar_input = (X)\n");
                
                //Argument 7: mach_msg_type_number_t scalar_inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t scalar_inputCnt = (X)\n");
                
                //Argument 8: io_struct_inband_t inband_input
                printf_indent(indent_count+1, "X io_struct_inband_t inband_input = (X)\n");
                
                //Argument 9: mach_msg_type_number_t inband_inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inband_inputCnt = (X)\n");
                
                //Argument 10: mach_vm_address_t ool_input
                printf_indent(indent_count+1, "X mach_vm_address_t ool_input = (X)\n");
                
                //Argument 11: mach_vm_size_t ool_input_size
                printf_indent(indent_count+1, "X mach_vm_size_t ool_input_size = (X)\n");
                
                //Argument 12: io_struct_inband_t inband_output
                printf_indent(indent_count+1, "< io_struct_inband_t inband_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 13: mach_msg_type_number_t *inband_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *inband_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 14: io_scalar_inband64_t scalar_output
                printf_indent(indent_count+1, "< io_scalar_inband64_t scalar_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 15: mach_msg_type_number_t *scalar_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *scalar_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 16: mach_vm_address_t ool_output
                printf_indent(indent_count+1, "X mach_vm_address_t ool_output = (X)\n");
                
                //Argument 17: mach_vm_size_t *ool_output_size
                printf_indent(indent_count+1, "< mach_vm_size_t *ool_output_size =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2867:{
                printf_indent(indent_count, "io_connect_set_notification_port_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t notification_type
                printf_indent(indent_count+1, "X uint32_t notification_type = (X)\n");
                
                //Argument 3: mach_port_t port
                printf_indent(indent_count+1, "X mach_port_t port = (X)\n");
                
                //Argument 4: io_user_reference_t reference
                printf_indent(indent_count+1, "X io_user_reference_t reference = (X)\n");
            }break;
            case 2868:{
                printf_indent(indent_count, "io_service_add_notification_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "X io_name_t notification_type = (X)\n");
                
                //Argument 3: io_string_t matching
                printf_indent(indent_count+1, "X io_string_t matching = (X)\n");
                
                //Argument 4: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 5: io_async_ref64_t reference
                printf_indent(indent_count+1, "X io_async_ref64_t reference = (X)\n");
                
                //Argument 6: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 7: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2869:{
                printf_indent(indent_count, "io_service_add_interest_notification_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: io_name_t type_of_interest
                printf_indent(indent_count+1, "X io_name_t type_of_interest = (X)\n");
                
                //Argument 3: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 4: io_async_ref64_t reference
                printf_indent(indent_count+1, "X io_async_ref64_t reference = (X)\n");
                
                //Argument 5: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 6: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2870:{
                printf_indent(indent_count, "io_service_add_notification_ool_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                    NDR_record_t NDR;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "X io_name_t notification_type = (X)\n");
                
                //Argument 3: io_buf_ptr_t matching
                printf_indent(indent_count+1, "X io_buf_ptr_t matching = (X)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 6: io_async_ref64_t reference
                printf_indent(indent_count+1, "X io_async_ref64_t reference = (X)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 8: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 9: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2871:{
                printf_indent(indent_count, "io_registry_entry_get_registry_entry_id\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint64_t entry_id;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_entry_id = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: uint64_t *entry_id
                printf_indent(indent_count+1, "< uint64_t *entry_id =\n");
                printf_indent(indent_count+2, "(uint64_t) 0x%llx\n", OutP_entry_id->entry_id);
            }break;
            case 2872:{
                printf_indent(indent_count, "io_connect_method_var_output\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t var_output;
                    NDR_record_t NDR;
                    mach_msg_type_number_t inband_outputCnt;
                    char inband_output[4096];
                    mach_msg_type_number_t scalar_outputCnt;
                    io_user_scalar_t scalar_output[16];
                    mach_msg_type_number_t var_outputCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_var_output = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_inband_outputCnt = OutP;
                
                __attribute__((unused)) Reply *OutP_inband_output = OutP;
                __attribute__((unused)) mach_msg_type_number_t inband_outputCnt = OutP->inband_outputCnt;
                msgh_size_delta = _WALIGN_(OutP->inband_outputCnt);
                OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 4096);
                __attribute__((unused)) Reply *OutP_scalar_outputCnt = OutP;
                
                __attribute__((unused)) Reply *OutP_scalar_output = OutP;
                __attribute__((unused)) mach_msg_type_number_t scalar_outputCnt = OutP->scalar_outputCnt;
                msgh_size_delta = OutP->scalar_outputCnt * 8;
                OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 128);
                __attribute__((unused)) Reply *OutP_var_outputCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t connection
                printf_indent(indent_count+1, "X mach_port_t connection = (X)\n");
                
                //Argument 2: uint32_t selector
                printf_indent(indent_count+1, "X uint32_t selector = (X)\n");
                
                //Argument 3: io_scalar_inband64_t scalar_input
                printf_indent(indent_count+1, "X io_scalar_inband64_t scalar_input = (X)\n");
                
                //Argument 4: mach_msg_type_number_t scalar_inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t scalar_inputCnt = (X)\n");
                
                //Argument 5: io_struct_inband_t inband_input
                printf_indent(indent_count+1, "X io_struct_inband_t inband_input = (X)\n");
                
                //Argument 6: mach_msg_type_number_t inband_inputCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t inband_inputCnt = (X)\n");
                
                //Argument 7: mach_vm_address_t ool_input
                printf_indent(indent_count+1, "X mach_vm_address_t ool_input = (X)\n");
                
                //Argument 8: mach_vm_size_t ool_input_size
                printf_indent(indent_count+1, "X mach_vm_size_t ool_input_size = (X)\n");
                
                //Argument 9: io_struct_inband_t inband_output
                printf_indent(indent_count+1, "< io_struct_inband_t inband_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 10: mach_msg_type_number_t *inband_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *inband_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 11: io_scalar_inband64_t scalar_output
                printf_indent(indent_count+1, "< io_scalar_inband64_t scalar_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 12: mach_msg_type_number_t *scalar_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *scalar_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 13: io_buf_ptr_t *var_output
                printf_indent(indent_count+1, "< io_buf_ptr_t *var_output =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 14: mach_msg_type_number_t *var_outputCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *var_outputCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2873:{
                printf_indent(indent_count, "io_service_get_matching_service\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t service;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_service = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_string_t matching
                printf_indent(indent_count+1, "X io_string_t matching = (X)\n");
                
                //Argument 3: mach_port_t *service
                printf_indent(indent_count+1, "< mach_port_t *service =\n");
                mach_port_t machport_service = NULL;
                mach_port_name_t machport_service_name = (mach_port_name_t)OutP_service->service.name;
                if(machport_service_name){
                ipc_entry_t ipcentry_service = ipc_entry_lookup(space, machport_service_name);
                if(ipcentry_service)
                machport_service = (struct ipc_port*)(ipcentry_service->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2874:{
                printf_indent(indent_count, "io_service_get_matching_service_ool\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t service;
                    NDR_record_t NDR;
                    kern_return_t result;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_service = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_result = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_buf_ptr_t matching
                printf_indent(indent_count+1, "X io_buf_ptr_t matching = (X)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 4: kern_return_t *result
                printf_indent(indent_count+1, "< kern_return_t *result =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 5: mach_port_t *service
                printf_indent(indent_count+1, "< mach_port_t *service =\n");
                mach_port_t machport_service = NULL;
                mach_port_name_t machport_service_name = (mach_port_name_t)OutP_service->service.name;
                if(machport_service_name){
                ipc_entry_t ipcentry_service = ipc_entry_lookup(space, machport_service_name);
                if(ipcentry_service)
                machport_service = (struct ipc_port*)(ipcentry_service->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2875:{
                printf_indent(indent_count, "io_service_get_authorization_id\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint64_t authorization_id;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_authorization_id = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: uint64_t *authorization_id
                printf_indent(indent_count+1, "< uint64_t *authorization_id =\n");
                printf_indent(indent_count+2, "(uint64_t) 0x%llx\n", OutP_authorization_id->authorization_id);
            }break;
            case 2876:{
                printf_indent(indent_count, "io_service_set_authorization_id\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: uint64_t authorization_id
                printf_indent(indent_count+1, "X uint64_t authorization_id = (X)\n");
            }break;
            case 2877:{
                printf_indent(indent_count, "io_server_version\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    uint64_t version;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_version = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: uint64_t *version
                printf_indent(indent_count+1, "< uint64_t *version =\n");
                printf_indent(indent_count+2, "(uint64_t) 0x%llx\n", OutP_version->version);
            }break;
            case 2878:{
                printf_indent(indent_count, "io_registry_entry_get_properties_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_properties = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_propertiesCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "< io_buf_ptr_t *properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 3: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2879:{
                printf_indent(indent_count, "io_registry_entry_get_property_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_ool_descriptor_t properties;
                    NDR_record_t NDR;
                    mach_msg_type_number_t propertiesCnt;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_properties = OutP;
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_propertiesCnt = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t registry_entry
                printf_indent(indent_count+1, "X mach_port_t registry_entry = (X)\n");
                
                //Argument 2: io_name_t plane
                printf_indent(indent_count+1, "X io_name_t plane = (X)\n");
                
                //Argument 3: io_name_t property_name
                printf_indent(indent_count+1, "X io_name_t property_name = (X)\n");
                
                //Argument 4: uint32_t options
                printf_indent(indent_count+1, "X uint32_t options = (X)\n");
                
                //Argument 5: io_buf_ptr_t *properties
                printf_indent(indent_count+1, "< io_buf_ptr_t *properties =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
                
                //Argument 6: mach_msg_type_number_t *propertiesCnt
                printf_indent(indent_count+1, "< mach_msg_type_number_t *propertiesCnt =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2880:{
                printf_indent(indent_count, "io_service_get_matching_service_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t service;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_service = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_struct_inband_t matching
                printf_indent(indent_count+1, "X io_struct_inband_t matching = (X)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 4: mach_port_t *service
                printf_indent(indent_count+1, "< mach_port_t *service =\n");
                mach_port_t machport_service = NULL;
                mach_port_name_t machport_service_name = (mach_port_name_t)OutP_service->service.name;
                if(machport_service_name){
                ipc_entry_t ipcentry_service = ipc_entry_lookup(space, machport_service_name);
                if(ipcentry_service)
                machport_service = (struct ipc_port*)(ipcentry_service->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_service_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_service);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2881:{
                printf_indent(indent_count, "io_service_get_matching_services_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t existing;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_existing = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_struct_inband_t matching
                printf_indent(indent_count+1, "X io_struct_inband_t matching = (X)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 4: mach_port_t *existing
                printf_indent(indent_count+1, "< mach_port_t *existing =\n");
                mach_port_t machport_existing = NULL;
                mach_port_name_t machport_existing_name = (mach_port_name_t)OutP_existing->existing.name;
                if(machport_existing_name){
                ipc_entry_t ipcentry_existing = ipc_entry_lookup(space, machport_existing_name);
                if(ipcentry_existing)
                machport_existing = (struct ipc_port*)(ipcentry_existing->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_existing_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_existing);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2882:{
                printf_indent(indent_count, "io_service_match_property_table_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    NDR_record_t NDR;
                    kern_return_t RetCode;
                    boolean_t matches;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if(OutP->RetCode != KERN_SUCCESS){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", OutP->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_NDR = OutP;
                __attribute__((unused)) Reply *OutP_RetCode = OutP;
                __attribute__((unused)) Reply *OutP_matches = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t service
                printf_indent(indent_count+1, "X mach_port_t service = (X)\n");
                
                //Argument 2: io_struct_inband_t matching
                printf_indent(indent_count+1, "X io_struct_inband_t matching = (X)\n");
                
                //Argument 3: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 4: boolean_t *matches
                printf_indent(indent_count+1, "< boolean_t *matches =\n");
                printf_indent(indent_count+2, "(Unregistered Type)\n");
            }break;
            case 2883:{
                printf_indent(indent_count, "io_service_add_notification_bin\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "X io_name_t notification_type = (X)\n");
                
                //Argument 3: io_struct_inband_t matching
                printf_indent(indent_count+1, "X io_struct_inband_t matching = (X)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 6: io_async_ref_t reference
                printf_indent(indent_count+1, "X io_async_ref_t reference = (X)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 8: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
            case 2884:{
                printf_indent(indent_count, "io_service_add_notification_bin_64\n");
                
                #pragma pack(4)
                typedef struct {
                    mach_msg_header_t Head;
                    mach_msg_body_t msgh_body;
                    mach_msg_port_descriptor_t notification;
                } Reply __attribute__((unused));
                #pragma pack(0)
                __attribute__((unused)) Reply *OutP = (Reply *)machmsg_head;
                __attribute__((unused)) unsigned int msgh_size = machmsg_head->msgh_size;
                __attribute__((unused)) unsigned int msgh_size_delta;
                if((msgh_size != (mach_msg_size_t)sizeof(Reply)) && (msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)) && (((mig_reply_error_t *)OutP)->RetCode != KERN_SUCCESS)){
                printf_indent(indent_count+1, "= RetCode: 0x%x\n", ((mig_reply_error_t *)OutP)->RetCode);
                return;
                }
                
                __attribute__((unused)) Reply *OutP_msgh_body = OutP;
                __attribute__((unused)) Reply *OutP_notification = OutP;
                __attribute__((unused)) Reply *OutP_trailer = OutP;
                
                //Argument 1: mach_port_t master_port
                printf_indent(indent_count+1, "X mach_port_t master_port = (X)\n");
                
                //Argument 2: io_name_t notification_type
                printf_indent(indent_count+1, "X io_name_t notification_type = (X)\n");
                
                //Argument 3: io_struct_inband_t matching
                printf_indent(indent_count+1, "X io_struct_inband_t matching = (X)\n");
                
                //Argument 4: mach_msg_type_number_t matchingCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t matchingCnt = (X)\n");
                
                //Argument 5: mach_port_t wake_port
                printf_indent(indent_count+1, "X mach_port_t wake_port = (X)\n");
                
                //Argument 6: io_async_ref64_t reference
                printf_indent(indent_count+1, "X io_async_ref64_t reference = (X)\n");
                
                //Argument 7: mach_msg_type_number_t referenceCnt
                printf_indent(indent_count+1, "X mach_msg_type_number_t referenceCnt = (X)\n");
                
                //Argument 8: mach_port_t *notification
                printf_indent(indent_count+1, "< mach_port_t *notification =\n");
                mach_port_t machport_notification = NULL;
                mach_port_name_t machport_notification_name = (mach_port_name_t)OutP_notification->notification.name;
                if(machport_notification_name){
                ipc_entry_t ipcentry_notification = ipc_entry_lookup(space, machport_notification_name);
                if(ipcentry_notification)
                machport_notification = (struct ipc_port*)(ipcentry_notification->ie_object);
                
                printf_indent(indent_count+2, "(IPC Port Name) 0x%x\n", machport_notification_name);
                printf_indent(indent_count+2, "(IPC Port Object) 0x%llx\n", machport_notification);
                }else{
                printf_indent(indent_count+2, "(NULL)\n");
                }
            }break;
        }
    }
    printf_indent(indent_count, "\n");
}
